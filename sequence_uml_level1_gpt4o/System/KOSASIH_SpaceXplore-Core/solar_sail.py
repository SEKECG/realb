import logging
import numpy as np

class SolarSail:
    """
    Simulate and manage the deployment, retraction, and thrust calculation of a solar sail for spacecraft propulsion.
    """
    
    def __init__(self, area, reflectivity):
        """
        Initialize a solar sail object with specified area and reflectivity, set its deployment status to False, and configure logging.
        :param area: Sail area in square meters
        :param reflectivity: Reflectivity coefficient (0 to 1)
        """
        self.area = area
        self.reflectivity = reflectivity
        self.is_deployed = False
        
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        self.logger.info(f"Initialized SolarSail with area={area}m², reflectivity={reflectivity}")
    
    def deploy(self):
        """
        Set the deployment status of a solar sail to True and log the deployment action.
        """
        self.is_deployed = True
        self.logger.info("Solar sail deployed")
    
    def retract(self):
        """
        Set the deployment status of a solar sail to 'False' and log the retraction action.
        """
        self.is_deployed = False
        self.logger.info("Solar sail retracted")
    
    def calculate_thrust(self, solar_constant=1361):
        """
        Calculate the thrust generated by a solar sail based on the solar constant, sail area, and reflectivity, returning zero if the sail is not deployed.
        :param solar_constant: Solar constant in W/m² (default: 1361 W/m² at Earth's orbit)
        :return: Thrust in newtons
        """
        if not self.is_deployed:
            self.logger.info("Sail not deployed - no thrust generated")
            return 0.0
        
        # Thrust calculation: F = (2 * P * A * R) / c
        # where P is solar constant, A is area, R is reflectivity, c is speed of light
        speed_of_light = 299792458  # m/s
        thrust = (2 * solar_constant * self.area * self.reflectivity) / speed_of_light
        
        self.logger.info(f"Calculated thrust: {thrust:.6f} N")
        return thrust
    
    def status(self):
        """
        Retrieve the deployment status and current thrust value of an object.
        :return: Dictionary containing status information
        """
        thrust = self.calculate_thrust()
        
        status_info = {
            "deployed": self.is_deployed,
            "area": self.area,
            "reflectivity": self.reflectivity,
            "thrust": thrust
        }
        
        self.logger.info(f"Status: {status_info}")
        return status_info
    
    def simulate(self, duration):
        """
        Simulate the operation of a solar sail over a specified duration, logging its status at each time step if the sail is deployed.
        :param duration: Total simulation time in seconds
        """
        if not self.is_deployed:
            self.logger.warning("Cannot simulate: Solar sail is not deployed")
            return
        
        time_step = 1  # 1 second time steps
        total_time = 0
        
        self.logger.info(f"Starting simulation for {duration} seconds")
        
        while total_time < duration:
            # Get current status
            current_status = self.status()
            
            self.logger.info(f"Time {total_time}s: {current_status}")
            
            total_time += time_step
        
        self.logger.info(f"Simulation completed. Total time: {total_time}s")